@using Entities
@using Business

    <div class="form-group">
        <select class="form-control" @onchange="OnChangedWarehouse">
            <option value="">Select a Warehouse...</option>
            @foreach (var warehouse in Warehouses)
            {
                <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
            }
        </select>
    </div>
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Select a Product...</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>

        <div class="form-group">
            <label>Write the Quantity</label>
            <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
        </div>

        <div class="form-group">
            <label>Is Entry?</label>
            <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
        </div>

        <input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOut"/>

    </EditForm>

<div class="text-center h4 text-success">
    @message
</div>


@code {
    InputOutputEntity oInOut = new InputOutputEntity();

    List<WarehouseEntity> Warehouses = new List<WarehouseEntity>();

    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();

    StorageEntity oStorage = new StorageEntity();

    string message;

    string buttonValue => oInOut.IsInput ? "Register Entry" : "Register Exit";

    protected override async Task OnInitializedAsync()
    {
        Warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();

        storages = B_Storage.StorageProductByWarehouse(idWarehouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if(oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"The Product {oProduct.ProductName} has been updated";
        }
        else
        {
            if(IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {

                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);

                message = $"The Product {oProduct.ProductName} has been updated";

            }
            else
            {
                message = $"There is not enough quantity in the warehouse of the {oProduct.ProductName}";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if(storageQuantity > quantity)
        {
            return true;
        }

        return false;
    }
}
